{
    "timestamp": "2025-04-14 11:47:56",
    "target_url": "https://example.com",
    "scan_metrics": {
        "zap": {
            "high_risks": 0,
            "medium_risks": 6,
            "low_risks": 6,
            "info_risks": 17
        },
        "nikto": {
            "total_vulnerabilities": 1,
            "high_risks": 0,
            "medium_risks": 0,
            "low_risks": 0
        }
    },
    "file_locations": {
        "nikto_output": "C:\\Users\\laxmi\\OneDrive\\Desktop\\Sem 6\\DWM\\WebAssure\\output\\nikto_1744611415.json",
        "zap_output": "C:\\Users\\laxmi\\OneDrive\\Desktop\\Sem 6\\DWM\\WebAssure\\output\\zap_1744611415.json",
        "combined_output": "C:\\Users\\laxmi\\OneDrive\\Desktop\\Sem 6\\DWM\\WebAssure\\output\\combined_1744611415.json"
    },
    "nikto_results": {
        "scan_status": "completed",
        "host": "https://example.com",
        "ip": "",
        "port": "",
        "hostname": "",
        "banner": "",
        "ssl_info": {},
        "vulnerabilities": [
            {
                "id": "MISC",
                "method": "GET",
                "msg": "requires a value",
                "references": ""
            }
        ],
        "completion_status": "full"
    },
    "zap_results": {
        "metadata": {
            "programName": "OWASP ZAP",
            "version": "2.16.1",
            "generated": "2025-04-14 11:47:56",
            "site": {
                "name": "https://example.com",
                "host": "example.com",
                "port": "443",
                "ssl": "true"
            }
        },
        "alerts": [
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "",
                "pluginId": "10020",
                "cweid": "1021",
                "confidence": "Medium",
                "sourceMessageId": 3,
                "wascid": "15",
                "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
                "messageId": "3",
                "inputVector": "",
                "url": "https://example.com/",
                "tags": {
                    "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                    "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
                    "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
                    "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
                },
                "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
                "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
                "alert": "Missing Anti-clickjacking Header",
                "param": "x-frame-options",
                "attack": "",
                "name": "Missing Anti-clickjacking Header",
                "risk": "Medium",
                "id": "0",
                "alertRef": "10020-1"
            },
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "max-age=2286",
                "pluginId": "10015",
                "cweid": "525",
                "confidence": "Low",
                "sourceMessageId": 3,
                "wascid": "13",
                "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
                "messageId": "3",
                "inputVector": "",
                "url": "https://example.com/",
                "tags": {
                    "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
                    "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
                },
                "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
                "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
                "alert": "Re-examine Cache-control Directives",
                "param": "cache-control",
                "attack": "",
                "name": "Re-examine Cache-control Directives",
                "risk": "Informational",
                "id": "2",
                "alertRef": "10015"
            },
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "max-age=2271",
                "pluginId": "10015",
                "cweid": "525",
                "confidence": "Low",
                "sourceMessageId": 1,
                "wascid": "13",
                "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
                "messageId": "1",
                "inputVector": "",
                "url": "https://example.com/",
                "tags": {
                    "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
                    "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
                },
                "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
                "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
                "alert": "Re-examine Cache-control Directives",
                "param": "cache-control",
                "attack": "",
                "name": "Re-examine Cache-control Directives",
                "risk": "Informational",
                "id": "3",
                "alertRef": "10015"
            },
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "",
                "pluginId": "10038",
                "cweid": "693",
                "confidence": "High",
                "sourceMessageId": 3,
                "wascid": "15",
                "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
                "messageId": "3",
                "inputVector": "",
                "url": "https://example.com/",
                "tags": {
                    "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                    "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
                    "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
                },
                "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
                "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
                "alert": "Content Security Policy (CSP) Header Not Set",
                "param": "",
                "attack": "",
                "name": "Content Security Policy (CSP) Header Not Set",
                "risk": "Medium",
                "id": "4",
                "alertRef": "10038-1"
            },
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "",
                "pluginId": "10035",
                "cweid": "319",
                "confidence": "High",
                "sourceMessageId": 3,
                "wascid": "15",
                "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
                "messageId": "3",
                "inputVector": "",
                "url": "https://example.com/",
                "tags": {
                    "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                    "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
                    "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
                },
                "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
                "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
                "alert": "Strict-Transport-Security Header Not Set",
                "param": "",
                "attack": "",
                "name": "Strict-Transport-Security Header Not Set",
                "risk": "Low",
                "id": "6",
                "alertRef": "10035-1"
            },
            {
                "sourceid": "3",
                "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                "method": "GET",
                "evidence": "",
                "pluginId": "10021",
                "cweid": "693",
                "confidence": "Medium",
                "sourceMessageId": 1,
                "wascid": "15",
                "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
                "messageId": "1",
                "inputVector": "",
                "url": "https://example.com/",
                "tags": {
                    "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                    "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
                    "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
                },
                "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
                "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
                "alert": "X-Content-Type-Options Header Missing",
                "param": "x-content-type-options",
                "attack": "",
                "name": "X-Content-Type-Options Header Missing",
                "risk": "Low",
                "id": "8",
                "alertRef": "10021"
            },
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "",
                "pluginId": "10020",
                "cweid": "1021",
                "confidence": "Medium",
                "sourceMessageId": 13,
                "wascid": "15",
                "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
                "messageId": "13",
                "inputVector": "",
                "url": "https://example.com",
                "tags": {
                    "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                    "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
                    "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
                    "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
                },
                "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
                "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
                "alert": "Missing Anti-clickjacking Header",
                "param": "x-frame-options",
                "attack": "",
                "name": "Missing Anti-clickjacking Header",
                "risk": "Medium",
                "id": "12",
                "alertRef": "10020-1"
            },
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "",
                "pluginId": "10038",
                "cweid": "693",
                "confidence": "High",
                "sourceMessageId": 16,
                "wascid": "15",
                "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
                "messageId": "16",
                "inputVector": "",
                "url": "https://example.com/robots.txt",
                "tags": {
                    "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                    "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
                    "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
                },
                "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
                "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
                "alert": "Content Security Policy (CSP) Header Not Set",
                "param": "",
                "attack": "",
                "name": "Content Security Policy (CSP) Header Not Set",
                "risk": "Medium",
                "id": "13",
                "alertRef": "10038-1"
            },
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "",
                "pluginId": "10038",
                "cweid": "693",
                "confidence": "High",
                "sourceMessageId": 19,
                "wascid": "15",
                "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
                "messageId": "19",
                "inputVector": "",
                "url": "https://example.com/sitemap.xml",
                "tags": {
                    "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                    "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
                    "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
                },
                "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
                "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
                "alert": "Content Security Policy (CSP) Header Not Set",
                "param": "",
                "attack": "",
                "name": "Content Security Policy (CSP) Header Not Set",
                "risk": "Medium",
                "id": "15",
                "alertRef": "10038-1"
            },
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "max-age=2226",
                "pluginId": "10015",
                "cweid": "525",
                "confidence": "Low",
                "sourceMessageId": 15,
                "wascid": "13",
                "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
                "messageId": "15",
                "inputVector": "",
                "url": "https://example.com/",
                "tags": {
                    "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
                    "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
                },
                "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
                "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
                "alert": "Re-examine Cache-control Directives",
                "param": "cache-control",
                "attack": "",
                "name": "Re-examine Cache-control Directives",
                "risk": "Informational",
                "id": "18",
                "alertRef": "10015"
            },
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "max-age=2226",
                "pluginId": "10015",
                "cweid": "525",
                "confidence": "Low",
                "sourceMessageId": 13,
                "wascid": "13",
                "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
                "messageId": "13",
                "inputVector": "",
                "url": "https://example.com",
                "tags": {
                    "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
                    "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
                },
                "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
                "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
                "alert": "Re-examine Cache-control Directives",
                "param": "cache-control",
                "attack": "",
                "name": "Re-examine Cache-control Directives",
                "risk": "Informational",
                "id": "20",
                "alertRef": "10015"
            },
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "",
                "pluginId": "10038",
                "cweid": "693",
                "confidence": "High",
                "sourceMessageId": 13,
                "wascid": "15",
                "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
                "messageId": "13",
                "inputVector": "",
                "url": "https://example.com",
                "tags": {
                    "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                    "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
                    "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
                },
                "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
                "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
                "alert": "Content Security Policy (CSP) Header Not Set",
                "param": "",
                "attack": "",
                "name": "Content Security Policy (CSP) Header Not Set",
                "risk": "Medium",
                "id": "21",
                "alertRef": "10038-1"
            },
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "max-age=2283",
                "pluginId": "10015",
                "cweid": "525",
                "confidence": "Low",
                "sourceMessageId": 17,
                "wascid": "13",
                "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
                "messageId": "17",
                "inputVector": "",
                "url": "https://example.com",
                "tags": {
                    "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
                    "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
                },
                "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
                "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
                "alert": "Re-examine Cache-control Directives",
                "param": "cache-control",
                "attack": "",
                "name": "Re-examine Cache-control Directives",
                "risk": "Informational",
                "id": "22",
                "alertRef": "10015"
            },
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "",
                "pluginId": "10035",
                "cweid": "319",
                "confidence": "High",
                "sourceMessageId": 19,
                "wascid": "15",
                "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
                "messageId": "19",
                "inputVector": "",
                "url": "https://example.com/sitemap.xml",
                "tags": {
                    "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                    "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
                    "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
                },
                "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
                "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
                "alert": "Strict-Transport-Security Header Not Set",
                "param": "",
                "attack": "",
                "name": "Strict-Transport-Security Header Not Set",
                "risk": "Low",
                "id": "23",
                "alertRef": "10035-1"
            },
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "",
                "pluginId": "10035",
                "cweid": "319",
                "confidence": "High",
                "sourceMessageId": 16,
                "wascid": "15",
                "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
                "messageId": "16",
                "inputVector": "",
                "url": "https://example.com/robots.txt",
                "tags": {
                    "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                    "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
                    "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
                },
                "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
                "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
                "alert": "Strict-Transport-Security Header Not Set",
                "param": "",
                "attack": "",
                "name": "Strict-Transport-Security Header Not Set",
                "risk": "Low",
                "id": "26",
                "alertRef": "10035-1"
            },
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "",
                "pluginId": "10035",
                "cweid": "319",
                "confidence": "High",
                "sourceMessageId": 13,
                "wascid": "15",
                "description": "HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.",
                "messageId": "13",
                "inputVector": "",
                "url": "https://example.com",
                "tags": {
                    "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                    "CWE-319": "https://cwe.mitre.org/data/definitions/319.html",
                    "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
                },
                "reference": "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html\nhttps://owasp.org/www-community/Security_Headers\nhttps://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security\nhttps://caniuse.com/stricttransportsecurity\nhttps://datatracker.ietf.org/doc/html/rfc6797",
                "solution": "Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.",
                "alert": "Strict-Transport-Security Header Not Set",
                "param": "",
                "attack": "",
                "name": "Strict-Transport-Security Header Not Set",
                "risk": "Low",
                "id": "31",
                "alertRef": "10035-1"
            },
            {
                "sourceid": "3",
                "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
                "method": "GET",
                "evidence": "",
                "pluginId": "10021",
                "cweid": "693",
                "confidence": "Medium",
                "sourceMessageId": 13,
                "wascid": "15",
                "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
                "messageId": "13",
                "inputVector": "",
                "url": "https://example.com",
                "tags": {
                    "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
                    "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
                    "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
                },
                "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
                "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
                "alert": "X-Content-Type-Options Header Missing",
                "param": "x-content-type-options",
                "attack": "",
                "name": "X-Content-Type-Options Header Missing",
                "risk": "Low",
                "id": "34",
                "alertRef": "10021"
            },
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "max-age=2030",
                "pluginId": "10015",
                "cweid": "525",
                "confidence": "Low",
                "sourceMessageId": 315,
                "wascid": "13",
                "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
                "messageId": "315",
                "inputVector": "",
                "url": "https://example.com/",
                "tags": {
                    "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
                    "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
                },
                "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
                "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
                "alert": "Re-examine Cache-control Directives",
                "param": "cache-control",
                "attack": "",
                "name": "Re-examine Cache-control Directives",
                "risk": "Informational",
                "id": "40",
                "alertRef": "10015"
            },
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "max-age=1988",
                "pluginId": "10015",
                "cweid": "525",
                "confidence": "Low",
                "sourceMessageId": 316,
                "wascid": "13",
                "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
                "messageId": "316",
                "inputVector": "",
                "url": "https://example.com/",
                "tags": {
                    "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
                    "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
                },
                "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
                "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
                "alert": "Re-examine Cache-control Directives",
                "param": "cache-control",
                "attack": "",
                "name": "Re-examine Cache-control Directives",
                "risk": "Informational",
                "id": "41",
                "alertRef": "10015"
            },
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "max-age=1971",
                "pluginId": "10015",
                "cweid": "525",
                "confidence": "Low",
                "sourceMessageId": 328,
                "wascid": "13",
                "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
                "messageId": "328",
                "inputVector": "",
                "url": "https://example.com/",
                "tags": {
                    "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
                    "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
                },
                "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
                "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
                "alert": "Re-examine Cache-control Directives",
                "param": "cache-control",
                "attack": "",
                "name": "Re-examine Cache-control Directives",
                "risk": "Informational",
                "id": "59",
                "alertRef": "10015"
            },
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "max-age=2027",
                "pluginId": "10015",
                "cweid": "525",
                "confidence": "Low",
                "sourceMessageId": 327,
                "wascid": "13",
                "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
                "messageId": "327",
                "inputVector": "",
                "url": "https://example.com/",
                "tags": {
                    "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
                    "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
                },
                "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
                "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
                "alert": "Re-examine Cache-control Directives",
                "param": "cache-control",
                "attack": "",
                "name": "Re-examine Cache-control Directives",
                "risk": "Informational",
                "id": "60",
                "alertRef": "10015"
            },
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "max-age=1986",
                "pluginId": "10015",
                "cweid": "525",
                "confidence": "Low",
                "sourceMessageId": 325,
                "wascid": "13",
                "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
                "messageId": "325",
                "inputVector": "",
                "url": "https://example.com",
                "tags": {
                    "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
                    "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
                },
                "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
                "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
                "alert": "Re-examine Cache-control Directives",
                "param": "cache-control",
                "attack": "",
                "name": "Re-examine Cache-control Directives",
                "risk": "Informational",
                "id": "64",
                "alertRef": "10015"
            },
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "max-age=2028",
                "pluginId": "10015",
                "cweid": "525",
                "confidence": "Low",
                "sourceMessageId": 326,
                "wascid": "13",
                "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
                "messageId": "326",
                "inputVector": "",
                "url": "https://example.com",
                "tags": {
                    "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
                    "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
                },
                "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
                "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
                "alert": "Re-examine Cache-control Directives",
                "param": "cache-control",
                "attack": "",
                "name": "Re-examine Cache-control Directives",
                "risk": "Informational",
                "id": "65",
                "alertRef": "10015"
            },
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "max-age=3020",
                "pluginId": "10015",
                "cweid": "525",
                "confidence": "Low",
                "sourceMessageId": 628,
                "wascid": "13",
                "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
                "messageId": "628",
                "inputVector": "",
                "url": "https://example.com/",
                "tags": {
                    "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
                    "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
                },
                "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
                "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
                "alert": "Re-examine Cache-control Directives",
                "param": "cache-control",
                "attack": "",
                "name": "Re-examine Cache-control Directives",
                "risk": "Informational",
                "id": "78",
                "alertRef": "10015"
            },
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "max-age=3059",
                "pluginId": "10015",
                "cweid": "525",
                "confidence": "Low",
                "sourceMessageId": 627,
                "wascid": "13",
                "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
                "messageId": "627",
                "inputVector": "",
                "url": "https://example.com/",
                "tags": {
                    "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
                    "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
                },
                "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
                "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
                "alert": "Re-examine Cache-control Directives",
                "param": "cache-control",
                "attack": "",
                "name": "Re-examine Cache-control Directives",
                "risk": "Informational",
                "id": "79",
                "alertRef": "10015"
            },
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "max-age=3018",
                "pluginId": "10015",
                "cweid": "525",
                "confidence": "Low",
                "sourceMessageId": 637,
                "wascid": "13",
                "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
                "messageId": "637",
                "inputVector": "",
                "url": "https://example.com",
                "tags": {
                    "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
                    "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
                },
                "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
                "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
                "alert": "Re-examine Cache-control Directives",
                "param": "cache-control",
                "attack": "",
                "name": "Re-examine Cache-control Directives",
                "risk": "Informational",
                "id": "92",
                "alertRef": "10015"
            },
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "max-age=3055",
                "pluginId": "10015",
                "cweid": "525",
                "confidence": "Low",
                "sourceMessageId": 642,
                "wascid": "13",
                "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
                "messageId": "642",
                "inputVector": "",
                "url": "https://example.com",
                "tags": {
                    "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
                    "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
                },
                "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
                "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
                "alert": "Re-examine Cache-control Directives",
                "param": "cache-control",
                "attack": "",
                "name": "Re-examine Cache-control Directives",
                "risk": "Informational",
                "id": "94",
                "alertRef": "10015"
            },
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "max-age=3009",
                "pluginId": "10015",
                "cweid": "525",
                "confidence": "Low",
                "sourceMessageId": 639,
                "wascid": "13",
                "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
                "messageId": "639",
                "inputVector": "",
                "url": "https://example.com/",
                "tags": {
                    "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
                    "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
                },
                "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
                "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
                "alert": "Re-examine Cache-control Directives",
                "param": "cache-control",
                "attack": "",
                "name": "Re-examine Cache-control Directives",
                "risk": "Informational",
                "id": "98",
                "alertRef": "10015"
            },
            {
                "sourceid": "3",
                "other": "",
                "method": "GET",
                "evidence": "max-age=2987",
                "pluginId": "10015",
                "cweid": "525",
                "confidence": "Low",
                "sourceMessageId": 641,
                "wascid": "13",
                "description": "The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content. For static assets like css, js, or image files this might be intended, however, the resources should be reviewed to ensure that no sensitive content will be cached.",
                "messageId": "641",
                "inputVector": "",
                "url": "https://example.com/",
                "tags": {
                    "CWE-525": "https://cwe.mitre.org/data/definitions/525.html",
                    "WSTG-v42-ATHN-06": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses"
                },
                "reference": "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control\nhttps://grayduck.mn/2021/09/13/cache-control-recommendations/",
                "solution": "For secure content, ensure the cache-control HTTP header is set with \"no-cache, no-store, must-revalidate\". If an asset should be cached consider setting the directives \"public, max-age, immutable\".",
                "alert": "Re-examine Cache-control Directives",
                "param": "cache-control",
                "attack": "",
                "name": "Re-examine Cache-control Directives",
                "risk": "Informational",
                "id": "103",
                "alertRef": "10015"
            }
        ],
        "summary": {
            "total_alerts": 0,
            "high_risks": 0,
            "medium_risks": 6,
            "low_risks": 6
        }
    },
    "scan_id": "67fca8949064359bbfdd7759"
}